package assignment8;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;

import edu.princeton.cs.introcs.StdDraw;
import support.cse131.NotYetImplementedException;

public class Entity {

	private double X = 0;
	private double Y = 0;
	private boolean Zombie;
	private double Radius = 0.008;

	/**
	 * @param isZombie the undead state of this Entity.
	 *                 true if zombie, false otherwise.
	 * @param x        the x-coordinate of this Entity's center.
	 * @param y        the y-coordinate of this Entity's center.
	 */


	public Entity(boolean isZombie, double x, double y) {
		Zombie = isZombie;
		X = x;
		Y = y;
	}

	/**
	 * @return true if zombie, false otherwise
	 */
	public boolean isZombie() {
		return this.Zombie;
	}

	/**
	 * @return the center x-coordinate
	 */
	public double getX() {
		return this.X;
	}

	/**
	 * @return the center y-coordinate
	 */
	public double getY() {
		return this.Y;
	}

	/**
	 * @return the radius
	 */
	public double getRadius() {
		return this.Radius;
	}

	/**
	 * Draw this Entity.
	 */
	public void draw() {

		if (this.Zombie == true) {
			StdDraw.setPenColor(Color.red);
			StdDraw.filledCircle(X, Y, Radius);
		}
		else {
			StdDraw.setPenColor(Color.black);
			StdDraw.filledCircle(X, Y, Radius);
		}
	}



	/**
	 * @param xOther x-coordinate of the other point.
	 * @param yOther y-coordinate of the other point.
	 * @return distance between this Entity's center and the specified other point.
	 */
	public double distanceCenterToPoint(double xOther, double yOther) {

		double distance = Math.sqrt(Math.pow(xOther - this.X,2) + Math.pow(yOther - this.Y,2) );

		return distance;

	}

	/**
	 * @param other the other Entity
	 * @return the distance between this Entity's center and the specified other
	 *         Entity's center.
	 */
	public double distanceCenterToCenter(Entity other) {
		return distanceCenterToPoint(other.getX(), other.getY());
	}

	/**
	 * @param xOther      the x-coordinate of another Entity's center.
	 * @param yOther      the y-coordinate of another Entity's center.
	 * @param radiusOther the radius of another Entity.
	 * @return the distance between this Entity's edge and the specified other
	 *         Entity's edge.
	 */
	public double distanceEdgeToEdge(double xOther, double yOther, double radiusOther) {

		double distance = distanceCenterToPoint(xOther, yOther);

		return distance - this.Radius - radiusOther;

	}

	/**
	 * @param other the other Entity.
	 * @return the distance between this Entity's edge and the specified other
	 *         Entity's edge.
	 */
	public double distanceEdgeToEdge(Entity other) {
		return distanceEdgeToEdge(other.getX(), other.getY(), other.getRadius());
	}

	/**
	 * @param xOther      the x-coordinate of another Entity's center.
	 * @param yOther      the y-coordinate of another Entity's center.
	 * @param radiusOther the radius of another Entity.
	 * @return true if the bounding circle of this Entity overlaps with the bounding
	 *         circle of the specified other Entity, false otherwise.
	 */
	public boolean isTouching(double xOther, double yOther, double radiusOther) {
		if (distanceEdgeToEdge(xOther, yOther, radiusOther) <= 0) {
			return true;
		}
		else {
			return false;
		}
	}

	/**
	 * @param other the other Entity
	 * @return true if the bounding circle of this Entity overlaps with the bounding
	 *         circle of the specified other Entity, false otherwise.
	 */
	public boolean isTouching(Entity other) {
		return isTouching(other.getX(), other.getY(), other.getRadius());
	}

	/**
	 * @param xOther x-coordinate of the other point.
	 * @param yOther y-coordinate of the other point.
	 * @param amount the amount to move toward the point.
	 */
	public void moveToward(double xOther, double yOther, double amount) {
		double xVector = xOther - getX();
		double yVector = yOther - getY();
		double angle = Math.atan2(yVector, xVector);
		double xAmount = amount * Math.cos(angle);
		double yAmount = amount * Math.sin(angle);


		this.X += xAmount;
		this.Y += yAmount;

	}

	/**
	 * @param other  the other Entity
	 * @param amount the amount to move toward the other Entity.
	 */
	public void moveToward(Entity other, double amount) {
		moveToward(other.getX(), other.getY(), amount);
	}

	/**
	 * @param xOther x-coordinate of the other point.
	 * @param yOther y-coordinate of the other point.
	 * @param amount the amount to move away from the point.
	 */
	public void moveAwayFrom(double xOther, double yOther, double amount) {
		moveToward(xOther, yOther, -1 * amount);
	}

	/**
	 * @param other  the other Entity
	 * @param amount the amount to move away from the other Entity.
	 */
	public void moveAwayFrom(Entity other, double amount) {
		moveToward(other.getX(), other.getY(), amount);
	}

	/**
	 * @param entities          this list of entities to search.
	 * @param includeZombies    whether to include zombies in this search or not.
	 * @param includeNonzombies whether to include nonzombies in this search or not.
	 * @return the closest Entity to this Entity in entities (which is not this).
	 */
	private Entity findClosest(List<Entity> entities, boolean includeZombies, boolean includeNonzombies) {
		Entity closest = null;
		double closestDist = Double.MAX_VALUE;
		for (Entity other : entities) {
			// NOTE:
			// We almost always want to use the equals method when comparing Objects.
			// In this case, we check if the two entities are the exact same instance.
			if (this != other) {
				if ((other.isZombie() && includeZombies) || (!other.isZombie() && includeNonzombies)) {
					double dist = distanceEdgeToEdge(other);
					if (dist < closestDist) {
						closest = other;
						closestDist = dist;
					}
				}
			}
		}
		return closest;
	}

	/**
	 * @param entities this list of entities to search.
	 * @return the closest nonzombie to this Entity in entities (which is not this).
	 */
	public Entity findClosestNonzombie(List<Entity> entities) {
		return findClosest(entities, false, true);
	}

	/**
	 * @param entities this list of entities to search.
	 * @return the closest zombie to this Entity in entities (which is not this).
	 */
	public Entity findClosestZombie(List<Entity> entities) {
		return findClosest(entities, true, false);
	}

	/**
	 * @param entities this list of entities to search.
	 * @return the closest Entity to this Entity in entities (which is not this).
	 */
	public Entity findClosestEntity(List<Entity> entities) {
		return findClosest(entities, true, true);
	}



	/**
	 * Updates the appropriate state (instance variables) of this Entity for the
	 * current frame of the simulation.
	 * 
	 * @param entities  list of remaining entities in the simulation. It is likely
	 *           		that this Entity will be one of the entities in the list.
	 *                  Care should be taken to not overreact to oneself.
	 * @param deltaTime the change in time since the previous frame
	 * 
	 * @return true if this Entity remains in existence past the current frame,
	 *         false if consumed
	 */



	public boolean update(List<Entity> entities, double deltaTime) {

		Entity closestZombie = this.findClosestZombie(entities);
		Entity closestNonZombie = this.findClosestNonzombie(entities);

		//set x and y coordinates of zombies and humans to boundaries
		if(this.getX() <= 0) {
			this.X+= 0.006;
		} else if(this.getX() >= 1.0) {
			this.X-= 0.006;
		}
		if(this.getY()<=0.0) {
			this.Y += 0.006;
		} else if(this.getY()>=1.0) {
			this.Y -= 0.006;
		}





		if (this.Zombie == true && this.findClosestNonzombie(entities)!= null) {

			this.findClosestNonzombie(entities);
			this.moveToward(closestNonZombie, 0.006 );

			return true;

		} else if(this.Zombie == true && this.findClosestNonzombie(entities)== null) {
			return true;
		}

		// else not a zombie
		// you have a chance of becoming a zombie (80%)
		// if you do become a zombie, return true because you will be present next round
		// else, the other 20% of the time, the closest zombie radius gets multiplied by 1.2 times
		// if their radius is 0.02 or greater, set their radius to 0.02
		// new zombie also move toward non zombies



		else {

			if (this.isTouching(closestZombie)) {

				double transformationChance = Math.random();

				if (transformationChance >= 0.20) {
					this.Zombie = true;
					return true;
				}

				// if you do not transform into a zombie, you are consumed and zombie radius gets bigger

				else {

					double closestZombieRadius = this.findClosestZombie(entities).getRadius();//deletion of human

					if (closestZombieRadius * 1.2 > 0.02) {
						closestZombieRadius = 0.02;
						this.findClosestZombie(entities).Radius = closestZombieRadius;

					}

					// if radius is not bigger than 0.2

					else {
						this.findClosestZombie(entities).Radius = closestZombieRadius * 1.2;
					}

					return false;
				}

			}
			else {
				this.moveAwayFrom(findClosestEntity(entities), 0.004);
			}
		}
		return true;
	}
}
